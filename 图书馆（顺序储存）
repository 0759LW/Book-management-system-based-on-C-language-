#include <iostream>
#include <string>
#include <iomanip>
#include <string.h>
#include <stdio.h>
#define MAXSIZE 10000
using namespace std;
int flag = 0;   //图书信息读取标记
int num;     //记录图书个数
float ave;     //记录所有书平均价格

typedef struct Book {
	char no[20];
	char name[50];
	float price;
}Book;

typedef struct SqList {
	Book *elem;
	int length;
}Sqlist;

SqList book;


void CreatSqList(SqList &book) {
	book.elem = new Book[MAXSIZE];
	book.length = 0;
}

void Output() {
	int i = 0;

	if(flag==0) {
		cout << "还未创建图书！" << endl;
		return;
	}
	else {
		cout << "书号                 书名               价格：" << '\n';
		while(i<num) {
			cout << book.elem[i].no << "\t" << book.elem[i].name << "\t" <<setiosflags(ios::fixed)<<setprecision(2)<<book.elem[i].price<<endl;
			i++;
		}
		cout<< "一共有图书" <<num<<"本"<<endl;
		cout<< "信息显示完毕!" << endl;
	}
}


void create() {
	int i = 0;int j;
   num=0;
       FILE *fp;
     fp=fopen("library.txt","r+");
        //如果文件存在，r+不会自动清空文件，
   //会把读写指针指向文件的开头，所以会覆盖已有的文件
if(fp==NULL)
{
    fp=fopen("library.txt","w+");
//当文件不存在时，w+会创建一个文件。
}
   cout<<"下面请输入图书的信息 输入(0 0 0)时结束该功能"<<endl;
        cout << "书号                 书名               价格：" << '\n';
        cin>> book.elem[i].no >> book.elem[i].name >> book.elem[i].price;

        while(((book.elem[i].no)!="0")&& ((book.elem[i].name)!="0") && ((book.elem[i].price)!=0))
         { i++;
          cout << "书号                 书名               价格：" << '\n';
			cin>> book.elem[i].no >> book.elem[i].name >> book.elem[i].price;

			num = i;
         }
         flag = 1;
		cout << "图书创建完毕！" << endl;
		Output();
fclose(fp);
}






void Most_value() {
	int i;
    int f=0;
   float value=0;
	if(flag==0) {
		cout << "还未读取图书！！！" << endl;
		return ;
	}

	cout << "价格最高图书信息为：" << endl;
	cout << "书号                 书名               价格：" << '\n';
	for(i=0;i<num;i++) {

		if(value<book.elem[i].price) {
			value=book.elem[i].price;

		} }
    for(i=0;i<num;i++) {

		if(value==book.elem[i].price) {
			f++;

		}

	}
 cout<<"最贵的图书有"<<f<<"本"<<endl;
	for(i=0;i<num;i++) {
		if(value==book.elem[i].price) {
			cout << book.elem[i].no << "\t" << book.elem[i].name << "\t" << book.elem[i].price << endl;
		}
	}
}



void modify(){
	int i;
	float sum = 0;
    float sum1=0;
	if(flag==0) {
		cout << "还未创建图书！" << endl;
		return ;
	}

	for(i=0;i<num;i++) {
		sum = sum + book.elem[i].price;
	}

	ave = sum/num;

	for(i=0;i<num;i++)
    {
        if( book.elem[i].price<ave)
        { sum1=book.elem[i].price;
            sum1=sum1*1.2;
            book.elem[i].price=sum1;
        }
        else if(book.elem[i].price>=ave)
        {
             sum1=book.elem[i].price;
            sum1=sum1*1.1;
            book.elem[i].price=sum1;
        }
    }
    cout<<"修改前的平均值为"<<ave<<endl;
    cout<<"修改后的图书信息为"<<ave<<endl;
      Output();

}


void Search_name() {
	int i;int i1;
	int n = 0;  //记录相同书名图书个数
	int j,m;
	char NAME[20][20];
	if(flag==0) {
		cout << "还未读取图书！！！" << endl;
		return ;
	}
    cout<<"请输入要查找的次数"<<endl;
    cin>>m;
	cout << "请输入需要查找的"<<m<<"本书名：" ;
	for(i1=0;i1<m;i1++)
    {
        cin>>NAME[i1];
    }
	cout << endl;
for(j=0;j<m;j++){
	for(i=0;i<num;i++) {
		if(strcmp(book.elem[i].name,NAME[j]) == 0) {
			cout << "书名            书号             价格：" << endl;
			cout << book.elem[i].name << "\t" << book.elem[i].no << "\t" << book.elem[i].price << endl;
			n = n + 1;
		}
	}
	if(n==0) {
		cout << "抱歉,没有你的最爱！" << endl;
	}
	else
    {
        cout<<"已找到"<<n<<"本与你喜爱的书同名的书本"<<endl;
    }
}

}


void Search_site() {
	int location;

	if(flag==0) {
		cout << "还未读取图书！！！" << endl;
		return ;
	}

	cout << "请输入需要查找图书的位置：";
	cin >> location;
	cout << endl;
	if(location<1 || location>num) {
		cout << "抱歉，最佳位置上的图书不存在！" << endl;
	}
	else {
		cout << "该图书信息为：" << "书号          书名          价格：" << endl;
		cout << book.elem[location-1].no << "\t" << book.elem[location-1].name << "\t" << book.elem[location-1].price << endl;
	}
}


void Insert() {
	int i;  //位置
	int j;
	int f=0;
	Book bk;  //插入的图书

	if(flag==0) {
		cout << "还未创建图书！！！" << endl;
		return ;
	}

	cout << "请输入库位置：";
	cin >> i;
	cout << endl;
	cout << "请输入书号：";
	cin >> bk.no;
	cout << "请输入书名：";
	cin >> bk.name;
	cout << "请输入价格：";
	cin >> bk.price;



	if(i<1 || i>num+1) {
		cout << "抱歉，入库位置非法！" << endl;
	}

	if(1<i && i<=num+1 && num != MAXSIZE) {
		for(j=num-1;j>=i-1;j--) {
			book.elem[j+1] = book.elem[j];
		}
		book.elem[i-1] = bk;
		++num;
		++book.length;
		f=1;
	}
	if(f==1)
    {
        cout<<"新图书入库成功！"<<endl;
        Output();

    }


}


void Delete() {
	int i;  //位置
	int j;
    int f=0;
	if(flag==0) {
		cout << "还未创建图书！！！" << endl;
		return ;
	}



	cout << "请输入将要出库图书的位置：";
	cin >> i;

	if(i<1||i>num) {
		cout << "位置输入错误！" << endl;
		f=1;
	}
	else {
		for(j=i;j<=num-1;j++) {
			book.elem[j-1] = book.elem[j];
		}
		--num;
    if(f!=1)
    {
         cout<<"旧图书出库成功！"<<endl;
        Output();
    }


	}
}


void Reverse() {   //逆序输出
	int i,j;
	Book bk;

	if(flag==0) {
		cout << "还未读取图书！！！" << endl;
		return ;
	}


	for(i=0;i<num/2;i++) {
		bk = book.elem[i];
		book.elem[i] = book.elem[num-i-1];
		book.elem[num-i-1] = bk;
	}



	cout << "逆序操作完毕！下列是逆序后的图书信息" << endl;
	Output();
}


void Sort() {
	int i,j;
	Book bk;

	if(flag==0) {
		cout << "还未读取图书！！！" << endl;
       return;
	}


	for(i=0;i<num;i++) {
		for(j=0;j<num-i-1;j++) {
			if(book.elem[j].price < book.elem[j+1].price) {
				bk = book.elem[j];
				book.elem[j] = book.elem[j+1];
				book.elem[j+1] = bk;
			}
		}
	}

Output();


	cout << "排序成功" << endl;
}

void eliminate()
{
    int i;
	int j,m;
	int j1;
	if(flag==0) {
		cout << "还未读取图书！！！" << endl;
		return ;
	}

  for(j=0;j<num-1;j++){
	for(i=j+1;i<num;i++) {
		if(strcmp(book.elem[i].no,book.elem[j].no) == 0) {

			for(j1=i;j1<=num-1;j1++) {
			book.elem[j1] = book.elem[j1+1];
		}
		--num;
		}
	}

}
cout<<"图书去重已完成！"<<endl;
Output();
}
void menu()
{
    	cout << "**************************（链式存储结构）******************" << endl;
		cout << "            |            欢迎进入图书管理系统~!           |" << endl;
		cout << "            |                                             |" << endl;
		cout << "            |            请输入数字选择服务：             |" << endl;
		cout << "            |            1.图书信息的创建                 |" << endl;
		cout << "            |            2.图书信息的排序(降序)           |" << endl;
		cout << "            |            3.图书信息的修改                 |" << endl;
		cout << "            |            4.图书信息的逆序                 |" << endl;
		cout << "            |            5.最贵图书的查找                 |" << endl;
		cout << "            |            6.最爱图书的查找                 |" << endl;
		cout << "            |            7.最佳位置图书的查找             |" << endl;
		cout << "            |            8.新图书的入库                   |" << endl;
		cout << "            |            9.旧图书的出库                   |" << endl;
		cout << "            |            10.图书信息的去重                |" << endl;
		cout << "            |            11.图书信息的显示                |" << endl;
		cout << "            |            0.保存信息并退出系统                       |" << endl;
		cout << "***********************************************************************" << endl << endl;
}
void read(SqList &book,FILE *fp)
{/*如果该文件存在，才执行这个函数*/
  int i=0;num=0;
     while( fscanf(fp,"%s %s %f",book.elem[i].no, book.elem[i].name,&book.elem[i].price)!=EOF)/*读到eof结束*/
     {  /*这里就是使数据里的数据形成链表读入到程序里，以head为头指针*/
         i++; num++;
     }
     flag=1;


}
void cun(SqList &book,FILE *fp)
{
    int i=0;
    while(num!=0)/*以链表形式将程序里的数据输出到文件里，遍历进行*/
    {
        fprintf(fp,"%s %s %f\n",book.elem[i].no , book.elem[i].name , book.elem[i].price);
        i++;
        num--;
    }


    return;
}

int main() {
	int n;
	CreatSqList(book);
 FILE *fp;/*创建文件指针*/
 fp=fopen("library.txt","r+");
    if(fp!=NULL) /*若存在librarye.txt这个文件，就调用read这里函数将文件里的数据输入到程序里*/
{ cout<<"已存在对应的图书信息文件，已把文件里的信息输入程序中了\n"<<endl;
    read(book,fp);
    fp = fopen("library.txt","w+");
}
	while(1) {
        menu();

		cin >> n;

		switch(n) {
			case 1:create();break;
			case 2:Sort();break;
			case 3:modify();break;
			case 4:Reverse();break;
			case 5:Most_value();break;
			case 6:Search_name();break;
			case 7:Search_site();break;
			case 8:Insert();break;
			case 9:Delete();break;
            case 10:eliminate();break;
			case 11:Output();break;
			case 0:cun(book,fp);cout << "欢迎再次使用~" << endl;
			       return 0;
			default:
					cout << "请选择正确的操作！！！" << endl;
					break;
		}
	}
	 fclose(fp);


	return 0;
}
